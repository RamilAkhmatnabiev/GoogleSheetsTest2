Файл конфигураций App.config

Между тегами <appSettings></appSettings> первой строкой указываем айди таблицы (у таблицы должно быть открыто разрешение на редактирование другими пользователями)
пример: <add key="id" value="18bjPMlVNxm7yQ0Rg1weso9_db6Rg6NrfHgpFj2S-u7s" />  (ключ лучше не менять и всегда указывать id)

Следующими строками указываем поля для подключения к серверам key - объем диска, value - настройки подключения 
пример: <add key="1.7" value="Server=127.0.0.1;User Id=postgres;Password=root;" />
Строки настройки серверов можно указывать несколько

Программа состоит из двух основных классов ServerManipulator и DataRecorder



			ServerManipulator.cs
В основном работает с библиотекой Npgsql
Конструктор принимает единственный параметр - строку с настройками подключения к БД из App.config и подготавливает подключение
Есть всего три метода DoConnection, GetDatabaseInfoForGoogleSheets, DoDesconnection

DoConnection подключается к серверу и формирует две команды

GetDatabaseInfoForGoogleSheets - возвращает list из массивов строк. Каждый массив строк - это данныt из бд(ip адрес сервера, имя базы данных, размер базы данных) в формате string
сколько баз данных на сервере, столько массивов с информациеq о ней в list

DoDesconnection разрывает соединение с сервером


			
			
			DataRecorder.cs
Работает с GoogleSheets Api
Реализовано много методов для взаимодействия с таблицей
Содержит в себе информацию о всех созданных листах. При работе основной программы создается один экземпляр.
allSheets хранит list из пар значений id/имя каждого листа в таблице созданных в конструкторе


В конструктор принимает два параметра: количество серверов из App.config, и ID нужной таблицы в гугл таблицах
В конструкторе подключается к api. 
1) GetSheetCredential формирует credential на базе файла client secret(файл берем из гугла при создании приложения https://console.developers.google.com/flows/enableapi?apiid=sheets.googleapis.com&pli=1) )
2) GetService подключается к google  с credential  и получаем service
DeleteAllSheets - удаляет все листы таблицы кроме первой (все листы удалять нельзя)
RenameFirstSheet - переименовывает первый(и единственный) лист (чтобы избежать ошибок при создании новых листов)
в цикле CreateNewSheet создает новые листы равной количестве заданных серверов из App.config
в CreateNewSheet происходит обращение к еще одному методу CreateTitleStringInSheet который формирует строку-шапку в листе 
DeleteFirstSheet удаляет первый ненужный лист
есть простор для оптимизации времени работы конструктора. т.к. каждый метод (включая многие, содержащиеся внутри данного метода) формирует запросы в таблицу и на базе запросов создает BatchUpdateSpreadsheetRequest, который в свою очередь работает достаточно долго.

FillSpreadSheets - заполняет лист в таблице данными из ServerManipulator
в параметры получает list из самих данных из ServerManipulator, айди таблицы, index - текущей итерации в основной программе(чтобы знать, на каком по счету листе находимся), размер диска текущего сервера
создает массив из запросов и отправляет в BatchUpdateSpreadsheetRequest
отдельным методом (CreateBottomStringInSheet) создает нижнюю строку листа в таблице

остальные методы вспомогательные. Названия говорят за себя
DeleteSheet(int sheetId)
private Tuple<string, int> GetListIdAndTitle(int index) - уже не используется совсем
private int GetLastListId()
public int GetThisIndexSheetId(int index)
многие методы можно оптимизировать



			Program.cs
создает все нужные переменные
запрашивает время между обновлениями в мс
запускает основной цикл, если в файле конфигурации более 2х строк
один раз создается экземпляр класса DataRecorder

далее в цикле инициализируем объект класса ServerManipulator с параметрами подключения к текущему серверу
получаем из ServerManipulator в DataRecorder данные для записи и передаем в метод FillSpreadSheets
отключаемся от текущего сервера
ждем
следующая итерация

Минусы:

Слишком много BatchUpdateSpreadsheetRequest нужно оптимизировать
